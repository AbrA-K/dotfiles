;; completion framework:
(use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-delay 0.0)
  (corfu-auto-prefix 1)
  (corfu-echo-documentation t)
  (corfu-echo-mode t)
  (corfu-preselect 'prompt)
  (corfu-separator ?\s)
  (corfu-on-exact-match nil)
  :bind
  (:map corfu-map ("C-<return>" . corfu-insert-separator))
  :init
  (global-corfu-mode))

(use-package nerd-icons-corfu)

;; documentation uses markdown, so:
(use-package markdown-mode)

;; better than fuzzy finding:
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(setq completion-category-overrides '((eglot (styles orderless))
                                      (eglot-capf (styles orderless))))

;; expand snippets like they should
(use-package yasnippet)
(require 'yasnippet)
(yas-global-mode 1)

(add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)

(use-package emacs :init
  (setq text-mode-ispell-word-completion nil)

  ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
  ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
  ;; setting is useful beyond Corfu.
  (setq read-extended-command-predicate #'command-completion-default-include-p))

;; simple lsp setup
(use-package eglot)
(with-eval-after-load 'eglot
  (add-to-list 'eglot-ignored-server-capabilities :inlayHintProvider))

;; eglot user mappings
(define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
(define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
(define-key eglot-mode-map (kbd "C-c h") 'eldoc)
(define-key eglot-mode-map (kbd "C-c a") 'eglot-code-actions)
(define-key eglot-mode-map (kbd "C-c d") 'flymake-show-project-diagnostics)
(define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)
(setq eldoc-echo-area-use-multiline-p nil)

;; better minibuffer completion
(use-package vertico)
(use-package marginalia)
(vertico-mode)
(marginalia-mode)

;; parinfer and it's fixes
(use-package parinfer-rust-mode
  :hook emacs-lisp-mode lisp-mode scheme-mode)
(setq parinfer-rust-disable-troublesome-modes t)
(setq parinfer-rust-check-before-enable 'defer)

;; treesitter
(require 'treesit)

;; debugger
(use-package dap-mode)
(dap-auto-configure-mode)

;;   ------------- LANGUAGE SPECIFIC SETTINGS -------------  

;; --------------------------- RUST ---------------------------

;; mode
(use-package rust-mode)
(use-package wgsl-mode)
(use-package exec-path-from-shell)
(add-to-list 'exec-path (expand-file-name "~/.cargo/bin"))
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

;; debug
(require 'dap-gdb-lldb)
;; (dap-gdb-lldb-setup)
(dap-register-debug-template "Rust::GDB Run Configuration"
                             (list :type "gdb"
                                   :request "launch"
                                   :name "GDB::Run"
                                   :gdbpath "rust-gdb"
                                   :target nil
                                   :cwd nil))

;; --------------------------- COMMON LISP ---------------------------

;; mode & repl
(use-package sly)
(setq org-babel-lisp-eval-fn 'sly-eval)
(setq inferior-lisp-program "/usr/bin/sbcl")

;; --------------------------- SCHEME ---------------------------

;; mode & repl
(use-package geiser-guile)
(with-eval-after-load 'geiser-guile
  (add-to-list 'geiser-guile-load-path "/home/abra/repos/guix"))
(add-to-list 'exec-path (expand-file-name "~/.guix-profile/bin"))

;; --------------------------- OCAML ---------------------------
;; mode: merlin & tuareg
(use-package tuareg)
(use-package ocp-indent)
(let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
  (when (and opam-share (file-directory-p opam-share))
    ;; Register Merlin
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    ;; Automatically start it in OCaml buffers
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; Use opam switch to lookup ocamlmerlin binary
    (setq merlin-command 'opam)))

;; the rest was auto-generated by opam
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (ansi-color-apply-on-region (point-min) (point-max)))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

;; Some key bindings
(global-set-key [f3] 'next-match)
(defun prev-match () (interactive nil) (next-match -1))
(global-set-key [(shift f3)] 'prev-match)
(global-set-key [backtab] 'auto-complete)
(defun set-ocaml-error-regexp ()
  (set
   'compilation-error-regexp-alist
   (list '("[Ff]ile \\(\"\\(.*?\\)\", line \\(-?[0-9]+\\)\\(, characters \\(-?[0-9]+\\)-\\([0-9]+\\)\\)?\\)\\(:\n\\(\\(Warning .*?\\)\\|\\(Error\\)\\):\\)?"
           2 3 (5 . 6) (9 . 11) 1 (8 compilation-message-face)))))

(add-hook 'tuareg-mode-hook 'set-ocaml-error-regexp)
(add-hook 'caml-mode-hook 'set-ocaml-error-regexp)


;; debugger
(require 'dap-ocaml)
(require 'dap-codelldb)
